// -*- coding: utf-8; mode: groovy -*-

import com.amazonaws.services.lambda.model.InvocationType;

import org.xmlsh.aws.gradle.lambda.AWSLambdaDeleteFunctionTask;
import org.xmlsh.aws.gradle.lambda.AWSLambdaInvokeTask;
import org.xmlsh.aws.gradle.lambda.AWSLambdaMigrateFunctionTask;
import org.xmlsh.aws.gradle.lambda.AWSLambdaCreateFunctionTask;
import com.amazonaws.services.lambda.model.Runtime;

buildscript {
  repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }

  }
  dependencies {
    classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
  }
}

apply plugin:'base'
apply plugin: "jp.classmethod.aws.lambda"
aws {
  profileName = "marklogic"
  region = "us-west-2"
}

lambda {
  region = "us-west-2"
}

task zip(type: Zip) {
  from "function/"
  destinationDir file("build")
}
task createFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
  functionName = "foobar"
  role = "arn:aws:iam::${aws.accountId}:role/lambda-poweruser"
  zipFile = zip.archivePath
  handler = "DecodeBase64.handler"
}


task migrateFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
  functionName = "foobar"
  role = "arn:aws:iam::${aws.accountId}:role/lambda-poweruser"
  zipFile = zip.archivePath
  handler = "DecodeBase64.handler"
}

task invokeFunction(type: AWSLambdaInvokeTask) {
  functionName = "foobar"
  invocationType = InvocationType.RequestResponse
  payload = file("sample-input/input.txt")
  doLast {
    println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
  }
}

task deleteFunction(type: AWSLambdaDeleteFunctionTask) {
  functionName = "foobar"
}

